#!/usr/bin/env python
import Bio.SeqIO as sio
import Bio.SeqRecord as srec
import Bio.Seq as Seq
import sys


def gb_read():
    recs = list(sio.parse(sys.stdin, 'genbank'))
    sys.stdout.write('\n'.join([str(r.seq) for r in recs])+'\n')

def fa_read():
    recs = list(sio.parse(sys.stdin, 'fasta'))
    sys.stdout.write('\n'.join([str(r.seq) for r in recs])+'\n')

def write_seqs(seqs,name, description,
               fmt = 'genbank'):
    #GUESS SEQUENCE TYPE USING THE SAME METHOD AS MUSCLE:
    ntcount = sum([seqs[0].upper().count(s) for s in 'GTCAU'])
    aacount = sum([seqs[0].upper().count(s) for s in  'ACDEFGHIKLMNPQRSTVWYU'])
    ucount = sum([seqs[0].upper().count(s) for s in  'U'])

    if aacount > ntcount: alphabet = Seq.Alphabet.ProteinAlphabet()
    else:
        if ucount != 0:
            alphabet = Seq.Alphabet.RNAAlphabet()
        else:
            alphabet = Seq.Alphabet.DNAAlphabet()

    recs = [ srec.SeqRecord(Seq.Seq(seq,alphabet), id = name + '_'+str(idx),
                            description = description + '_' +str(idx)) 
             for idx, seq in enumerate(seqs) ]
    sio.write(recs, sys.stdout, fmt)

def cv_prot(seqs, name, description,
            fmt = 'genbank'):
    ucount = sum([seqs[0].upper().count(s) for s in  'U'])
    aprot = Seq.Alphabet.ProteinAlphabet()
    if ucount != 0:
        ant = Seq.Alphabet.RNAAlphabet()
    else:
        ant = Seq.Alphabet.DNAAlphabet()
        
    inp_recs = [ srec.SeqRecord(Seq.Seq(seq,ant), id = name + '_'+str(idx),
                            description = description + '_' +str(idx)) 
             for idx, seq in enumerate(seqs) ]

    out_recs = [srec.SeqRecord(seq.seq.translate(), id = name + '_'+str(idx),
                            description = description + '_' +str(idx)) 
             for idx, seq in enumerate(inp_recs) ]
    sio.write(out_recs, sys.stdout, fmt)


def usage():
    print '''
Usage bio [func_name] [input]

func_name:
  gbr: gb_read           Reads a sequence from a genbank format stdin. (No metadata)
  gbw: gb_write [id] [descr] Writes stdin to a genbank format stdout.
  faw: fa_read                 Same as gbw.
  far: fa_write [id] [descr] Same as gbr.

  fap: cv_prot (fasta)   Writes nucleotide sequence to an amino acid fasta file
  gap: cv_prot (genbank) Writes nucleotide sequence to an amino acid gb file
  

'''
    return 0
  

if __name__ == '__main__':
    args = sys.argv[1:] if len(sys.argv) > 1 else exit(usage())
    prog = args[0]
    
    if prog == 'gbr':
        gb_read()
    elif prog in [ 'gbw', 'faw' ]:
        
        if len(args) < 2: exit(usage())
        if len(args) < 3: args.append('undescribed')
        fmt = 'genbank' if prog == 'gbw' else 'fasta'
        seqs = sys.stdin.read().strip().split('\n')
        name, description = args[1:]
        write_seqs(seqs, name, description, fmt = fmt)

    elif prog in [ 'fap', 'gbp' ]:
        
        if len(args) < 2: exit(usage())
        if len(args) < 3: args.append('undescribed')
        fmt = 'genbank' if prog == 'gbw' else 'fasta'
        seqs = sys.stdin.read().strip().split('\n')
        name, description = args[1:]
        cv_prot(seqs, name, description, fmt = fmt)

    elif prog == 'far':
        fa_read()

    exit(0)
