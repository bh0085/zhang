#!/usr/bin/env python
import Bio.SeqIO as sio
import Bio.SeqRecord as srec
import Bio.Seq as Seq
import sys

def gb_read():
    recs = list(sio.parse(sys.stdin, 'genbank'))
    sys.stdout.write('\n'.join([str(r.seq) for r in recs])+'\n')

def fa_read():
    recs = list(sio.parse(sys.stdin, 'fasta'))
    sys.stdout.write('\n'.join([str(r.seq) for r in recs])+'\n')

def gb_write(name, description):
    pass

def fa_write(name, description):
    
    seqs = sys.stdin.read().strip().split('\n')
    recs = [ srec.SeqRecord(Seq.Seq(seq), id = name + '_'+str(idx),
                            description = description + '_' +str(idx)) 
             for idx, seq in enumerate(seqs) ]
    sio.write(recs, sys.stdout, 'fasta')


def usage():
    print '''
Usage bio [func_name] [input]

func_name:
  gbr: gb_read           Reads a sequence from a genbank format stdin. (No metadata)
  gbw: gb_write [id] [descr] Writes stdin to a genbank format stdout.
  faw: fa_read                 Same as gbw.
  far: fa_write [id] [descr] Same as gbr.

'''
    return 0
  

if __name__ == '__main__':
    args = sys.argv[1:] if len(sys.argv) > 1 else exit(usage())
    prog = args[0]
    
    if prog == 'gbr':
        gb_read()
    elif prog == 'gbw':
        if len(args) < 2: exit(usage())
        if len(args) < 3: args.append('undescribed')
        name, description = args[1:]
        gb_write(name, description)
    elif prog == 'faw':
        if len(args) < 2: exit(usage())
        if len(args) < 3: args.append('undescribed')
        name, description = args[1:]
        fa_write(name, description)
    elif prog == 'far':
        fa_read()

    exit(0)
